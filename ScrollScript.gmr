?start: instruction+


# ----- Keywords -----

INT.2: "int"
FLT.2: "float"
STR.2: "string"
BOOL.2: "bool"

LET.2: "rune"
DELETE.2: "dispel"
DECL_CONST.2: "sealed"
CAST.2: "transmute"
AS.2: "->"
MAKE_CONST.2: "seal"

PRINT.2: "chant"
INPUT.2: "channel"

prev.2: FROM DAYS OF YORE
FROM.2: "from"
DAYS.2: "days"
OF.2: "of"
YORE.2: "yore"

TRUE.2: "Truthsung"
FALSE.2: "Falsehood"


# ----- Top-Level Syntax -----

?instruction: print_statement
        | var_declaration
        | const_declaration
        | assignment
        | deletion
        | seal_statement


# ----- Assignments & Declarations -----

var_declaration: LET var_name ["=" expression]

const_declaration: DECL_CONST LET var_name ["=" expression]

assignment: var_name "=" expression

deletion: DELETE var_name

seal_statement: MAKE_CONST var_name


# ----- Expressions -----

?expression: input_statement
        | value_cast
        | term
        | "-" term                      -> un_expr_negate
        | expression ADD_OP term        -> bin_expr_add
        | expression OR term            -> bin_expr_or

?term: factor
        | term MUL_OP factor    -> bin_expr_mul
        | term AND factor       -> bin_expr_and

?factor: power
        | NOT factor                    -> un_expr_not
        | factor "^" power              -> bin_expr_pow
        | "(" expression ")"            -> group_expr

?power: BOOLEAN
        | STRING
        | var_expr
        | number

?number: INTEGER | FLOAT


# ----- Data Types -----

INTEGER.2: ["-"] DIGIT+

FLOAT.2: ["-"] DIGIT+ "." DIGIT+

STRING.2: "\"" /[^\"]*/ "\""

BOOLEAN.2: TRUE | FALSE

DIGIT.2: "0".."9"

?atom: var_expr
     | number
     | STRING
     | "(" expression ")"

# ----- Operators -----

ADD_OP: "+" | "-"

MUL_OP: "*" | "/" | "%"

AND: "&"

OR: "|"

NOT: "!"

value_cast: CAST atom AS PRIMITIVE

# ----- Variables -----

var_name: VARIABLE

var_expr: VARIABLE prev         -> previous
        | VARIABLE

VARIABLE.1: /[a-zA-Z_][a-zA-Z0-9_]*/

PRIMITIVE.2: INT | FLT | STR | BOOL


# ----- Input & Output -----

print_statement: PRINT expression

input_statement: INPUT
                | INPUT expression    -> prompted_input


# ----- Features -----


# ----- Comments -----

COMMENT: /~~[^\n]*/
%ignore COMMENT

%import common.WS
%ignore WS