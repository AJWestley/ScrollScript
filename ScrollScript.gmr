start: instruction+

# ----- Keywords -----

INT.2: "int"
FLT.2: "float"
STR.2: "string"
BOOL.2: "bool"

LET.2: "rune"
DELETE.2: "dispel"
DECL_CONST.2: "sealed"
CAST.2: "transmute"
AS.2: "->"
MAKE_CONST.2: "seal"

PRINT.2: "reveal"
INPUT.2: "channel"

prev: FROM DAYS OF YORE 
FROM.2: "from"
DAYS.2: "days"
OF.2: "of"
YORE.2: "yore"

TRUE.2: "Truthsung"
FALSE.2: "Falsehood"

LENGTH.2: "measure"

IF.2: "if"
ELIF.2: "elif"
ELSE.2: "else"


# ----- Top-Level Syntax -----

?instruction: print_statement
            | var_declaration
            | const_declaration
            | assignment
            | deletion
            | seal_statement
            | if_statement


# ----- Assignments & Declarations -----

var_declaration: LET var_name ["=" expression]

const_declaration: DECL_CONST LET var_name ["=" expression]

assignment: var_name "=" expression

deletion: DELETE var_name

seal_statement: MAKE_CONST var_name


# ----- Control Flow -----

if_statement: IF "(" expression ")" "{" block "}" (ELIF "(" expression ")" "{" block "}")* [ELSE "{" block "}" ]

block: instruction*

# ----- Expressions -----

?expression: or_expr 

?or_expr: or_expr OR and_expr   -> bin_expr_or
             | and_expr

?and_expr: and_expr AND comp_expr -> bin_expr_and
              | comp_expr

?comp_expr: add_expr COMP_OP add_expr        -> bin_expr_comp
        | add_expr

?add_expr: add_expr ADD_OP mul_expr -> bin_expr_add
                   | mul_expr

?mul_expr: mul_expr MUL_OP unary_expr -> bin_expr_mul
                         | unary_expr

?unary_expr: NOT unary_expr         -> un_expr_not
                 | "-" unary_expr         -> un_expr_negate
                 | power_expr

?power_expr: power_expr "^" primary_expr -> bin_expr_pow
                | primary_expr

?primary_expr: value_cast
                   | input_statement
                   | length_expr
                   | BOOLEAN
                   | interpolated_string
                   | STRING
                   | var_expr
                   | number
                   | "(" expression ")"            -> group_expr


length_expr: LENGTH expression


# ----- Data Types -----

INTEGER.2: ["-"] DIGIT+
FLOAT.2: ["-"] DIGIT+ "." DIGIT+
STRING.2: "\"" /[^\"]*/ "\""
BOOLEAN.2: TRUE | FALSE
DIGIT.2: "0".."9"
?number: INTEGER | FLOAT


# ----- Operators -----

ADD_OP: "+" | "-" 
MUL_OP: "*" | "/" | "%"

COMP_OP: "<" | ">" | "<=" | ">=" | "==" | "!="

AND: "&&"
OR: "||"
NOT: "!"


# ----- Variables -----

var_name: VARIABLE
var_expr: VARIABLE prev     -> previous
        | VARIABLE

VARIABLE.1: /[a-zA-Z_][a-zA-Z0-9_]*/
DATA_TYPE.2: INT | FLT | STR | BOOL


# ----- Input & Output -----

print_statement: PRINT expression

input_statement: INPUT
               | INPUT expression      -> prompted_input


# ----- Features -----

# Casting

value_cast: CAST primary_expr AS DATA_TYPE 

# String Interpolation

interpolated_string: ESCAPED_STRING_START interpolation_part* ESCAPED_STRING_END

interpolation_part: INTERP_TEXT
                  | INTERP_EXPR_START expression INTERP_EXPR_END

ESCAPED_STRING_START: "$\""
ESCAPED_STRING_END: "\""

INTERP_EXPR_START: "{"
INTERP_EXPR_END: "}"

INTERP_TEXT: /([^{"}]|\\[{"}])+/

# ----- Comments -----

COMMENT: /~~[^\n]*/
%ignore COMMENT

%import common.WS
%ignore WS